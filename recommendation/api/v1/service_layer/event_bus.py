import asyncio
from typing import Callable


class EventBus:
    """
    Шина событий (EventBus) управляет подписчиками на события и уведомляет их
    при наступлении соответствующих событий.

    Методы:
    - subscribe(event_name: str, func: Callable): Подписывает обработчик на событие.
    - notify(event_name: str, *args, **kwargs): Уведомляет всех подписчиков о событии.
    """

    def __init__(self):
        """
        Инициализирует экземпляр EventBus с пустым словарём подписчиков.
        Каждый подписчик будет ассоциирован с событием, на которое он подписан.
        """
        self.subscribers = {}

    def subscribe(self, event_name: str, func: Callable):
        """
        Подписывает обработчик на определённое событие. Когда событие произойдёт,
        будет вызвано указанное обработчиком событие (функция).

        :param event_name: Имя события, на которое подписывается обработчик.
        :param func: Функция-обработчик, которая будет вызвана при наступлении события.
        """
        # Если событие ещё не существует в списке подписчиков, создаём новый список.
        if event_name not in self.subscribers:
            self.subscribers[event_name] = []

        # Добавляем обработчик в список подписчиков для данного события
        self.subscribers[event_name].append(func)

    async def notify(self, event_name: str, *args, **kwargs):
        """
        Уведомляет всех подписчиков о наступлении события.

        Для каждого подписчика, связанного с событием, будет вызвана его функция-обработчик.

        :param event_name: Имя события, которое произошло, и для которого нужно уведомить подписчиков.
        :param args: Аргументы, которые будут переданы всем подписчикам события.
        :param kwargs: Ключевые аргументы, которые будут переданы всем подписчикам события.
        """
        # Проверяем, есть ли подписчики на событие
        if event_name in self.subscribers:
            args = args or ()  # Если аргументы не переданы, используем пустой кортеж
            kwargs = kwargs or {}  # Если ключевые аргументы не переданы, используем пустой словарь

            # Создаём список задач для асинхронного выполнения функций-обработчиков
            tasks = [self.__safe_call(subscriber, *args, **kwargs) for subscriber in self.subscribers[event_name]]

            # Ожидаем завершения всех задач
            await asyncio.gather(*tasks)

    @staticmethod
    async def __safe_call(func, *args, **kwargs):
        """
        Безопасный вызов функции-обработчика. Ловит исключения, чтобы избежать их
        прерывания работы шины событий.

        Если в процессе работы обработчика возникает ошибка, она будет перехвачена,
        и будет выведено сообщение об ошибке с указанием имени обработчика.

        :param func: Функция-обработчик, которую нужно вызвать.
        :param args: Аргументы, которые передаются в обработчик.
        :param kwargs: Ключевые аргументы, которые передаются в обработчик.
        """
        try:
            # Асинхронно вызываем обработчик
            await func(*args, **kwargs)
        except Exception as e:
            # В случае ошибки возбуждаем новое исключение с подробным сообщением
            raise Exception(f"Ошибка в обработчике {func.__name__}: {e}") from e
